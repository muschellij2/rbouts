mutate(
day=date(timestamp+offset),
diasPasados=as.integer(difftime(day,firstDay,units="days"))
)
dailyTable=df %>% group_by(diasPasados,day) %>%
summarise(Suma=sum(.criterio)*dseconds(5)/dminutes(1),
Duracion=as.character(dminutes(Suma)),
Horas=n()*dseconds(5)/dhours(1),
HorasNonWear=sum(.criterioNW)*dseconds(5)/dhours(1),
Valido=Horas>=minimoHorasValidas & HorasNonWear < maximoHorasNonWear
) %>% ungroup() %>%
mutate(dayHuman=strftime(day,format = "%a %d-%m-%Y"))
average=dailyTable  %>% filter(Valido) %>%  .[["Suma"]] %>% mean(na.rm=T)
list(dailyTable=dailyTable, average=as.numeric(average))
}
timeQuantile_1=function(intervals,probs=0.5){
intervals %>% filter(probs<=probTo & probs>probFrom) %>%
mutate(probs=probs) %>%
mutate(quantile=from+difftime(to,from)*((probs-probFrom)/(probTo-probFrom)))
}
intervalsQuantiles=function(intervals,probs=c(0.5)){
tmp=intervals %>% as_tibble() %>%
mutate(duracion=difftime(to,from,units="secs"),
probTo=cumsum(as.integer(duracion))/sum(as.integer(duracion)),
probFrom=(function(x)c(-1e-9,x[-length(x)]))(probTo)
)
reduce(map(probs,function(probs)timeQuantile_1(tmp,probs)),rbind)
}
intervalConnect=function(interval,distance=dminutes(30),direction="forward"){
secDistance=distance/dseconds(1)
interval=interval %>%
mutate(lag=difftime(from,lag(to,1),units="secs"),
lead=difftime(lead(from,1),to,units="secs"))
if(direction=="forward") {
interval=interval %>% mutate(closeEnough=lead<=distance)
} else {
interval=interval %>% mutate(closeEnough=lag<=distance)
}
intervalConnected=interval %>%
mutate(change=!lag(closeEnough),
change=ifelse(is.na(change),0,change),
bout=cumsum(change) ) %>%
group_by(bout) %>%
summarise(from=first(from),to=last(to))
intervalConnected
}
intervalIntersect=function(interval1,interval2){
interval1=interval1 %>% mutate(.dummyColumn=1)
interval2=interval2 %>% transmute(.fromCut=from,.toCut=to) %>% mutate(.dummyColumn=1)
resultado=interval1 %>% full_join(interval2) %>% #filter(to >= .fromCut, from <=.toCut) %>%
mutate(solapan=as.integer(as.period(intersect(interval(from,to),interval(.fromCut,.toCut)),"seconds"))) %>%
filter(!is.na(solapan)) %>% as_tibble() %>%
transmute(from=from,to=to,fromNew=pmax(from,.fromCut),toNew=pmin(to,.toCut))
resultado
}
intervalConnectedOverInterval=function(interval1,interval2,distance1=dminutes(30), distance2=dminutes(5)){
#interval1=calculos$Sleep_total$bouts$intervals
#interval2=calculos$MuyQuieto$bouts$intervals
interval1Connected=interval1 %>%
intervalConnect(distance = distance1) %>%
mutate( falta = lead(from,1),.dummy=1)
interval2Connected=interval2 %>%
intervalConnect(distance = distance2) %>%
transmute(fromSup = from, toSup=to,.dummy=1)
interval1Connected %>%
left_join(interval2Connected) %>%
filter(to>=fromSup & to <=toSup) %>%
mutate(closeEnough = falta<=toSup) %>%
mutate(change=!lag(closeEnough),
change=ifelse(is.na(change),0,change),
bout=cumsum(change) ) %>%
group_by(bout) %>%
summarise(from=first(from),to=last(to),toPost=last(toSup)) %>%
select(-bout) %>%mutate(.dummy=1)%>%
left_join(interval2Connected) %>%
filter(from>=fromSup & from <=toSup) %>%
mutate(fromPre=fromSup) %>%
select(fromPre,from,to,toPost)
}
intervalBED=function(intervalSIB,intervalQuiet,distance1=dminutes(30), distance2=dminutes(5)){
sibOverQuiet=intervalConnectedOverInterval(intervalSIB,intervalQuiet,distance1=distance1, distance2=distance2)
sibOverQuiet_justSIB=sibOverQuiet %>% intervalIntersect(intervalSIB)
sibOverQuiet_justSIB_hours = sibOverQuiet_justSIB%>%
mutate(hours=as.numeric(difftime(toNew,fromNew,units="hours"))) %>%
group_by(from,to) %>%
summarise(hours=sum(hours),center=first(fromNew)+difftime(last(toNew),first(fromNew))/2) %>%
mutate(day=as_date(center+dhours(2))) %>% ungroup()
sibOverQuiet_justSIB_Maxhours = sibOverQuiet_justSIB_hours %>%
group_by(day) %>%
summarise(hours=max(hours))
sibOverQuiet_justSIB_hours %>% inner_join(sibOverQuiet_justSIB_Maxhours) %>%
select(from,to,day,hours) %>%
left_join (sibOverQuiet) %>%
mutate(
startBed=fromPre,
startSleep=from,
endSleep=to,
endBed=toPost,
sleepHours=hours,
sleepEfficiency=sleepHours/as.numeric(difftime(endSleep,startSleep,units="hours"))*100,
bedHours=as.numeric(difftime(endBed,startBed,units="hours")),
minutesBedToSleep=as.numeric(difftime(startSleep,startBed,units="mins"))
) %>%
select(day,startBed,startSleep,endSleep,endBed,sleepHours,sleepEfficiency,bedHours,minutesBedToSleep)
}
source('C:/Users/fjbar/Dropbox/www/github/acelerometria/R/basicoDeBoutsV2.R', encoding = 'UTF-8')
setwd("C:/Users/fjbar/Dropbox/www/rapache/informePaciente")
library(acelerometria)
?criterioENMO
library(acelerometria)
?criterioENMO
??criterioENMO
install.packages("roxygen2")
library(acelerometria)
?criterioENMO
library(acelerometria)
?criterioENMO
library(acelerometria)
?acelerometria
??acelerometria
help("acelerometria")
?criterioENMO
library(acelerometria)
?criterioENMO
library(acelerometria)
?criterioENMO
library(acelerometria)
?criterioENMO
?car
?cars
?criterioENMO
library(acelerometria)
?criterioENMO
library(acelerometria)
library(acelerometria)
?criterioENMO
criterioENMO=function(df,limInf=0,limSup=Inf){
#' \code{criterioENMO} generates a vector that indicates for each row of a dataframe (usually epoch or BIN file) if that row verifies the condition
#'    limInf<=df$ENMO <=limSup
#'
#' \code{df} is a dataframe that represents an accelerometry file with a column called "ENMO" (and optionally, a column called ".criterioNW" that represents NonWear time),
#'
#'
#'
#'@param df data frame with columns ENMO and .criterioNW
#'@param limInf inferior limit for ENMO
#'@param limSup superior limit for ENMO
#'
#' @return a boolean vector (TRUE/FAlSE) indicating if the condition is meet.
#'
#' @export
#'
if(! (df %>%assertthat::has_name(".criterioNW"))) df$.criterioNW=FALSE
df %>% mutate(.criterio= ENMO>=limInf & ENMO<=limSup & (!.criterioNW)) %>%.[[".criterio"]]
}
?criterioENMO
library(acelerometria)
?criterioENMO
library(acelerometria)
?criterioENMO
library(acelerometria)
?criterioENMO
library(acelerometria)
source('C:/Users/fjbar/Dropbox/www/rapache/informePaciente/unInformeBin.R', encoding = 'UTF-8', echo=TRUE)
setwd("C:/Users/fjbar/Dropbox/www/rapache/informePaciente")
library(stringr)
library(xtable)
library(stringi)
library(dplyr)
library(stringr)
install.packages(c("MASS", "mgcv", "survival"), lib="C:/Users/fjbar/Dropbox/www/github/acelerometria/packrat/lib-R/x86_64-w64-mingw32/3.5.0")
library(stringr)
library(stringr)
Sys.getenv()
library(stringr)
library(acelerometria)
library(acelerometria)
listaIntervalos=
list(
cama=cama %>% transmute(from=startBed,to=endBed),
dormir=cama %>% transmute(from=startSleep,to=endSleep)
) %>% append (calculos %>% map("intervals"))
packrat::disable()
source('C:/Users/fjbar/Dropbox/www/github/acelerometria/R/basicVariablesJW.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/fjbar/Dropbox/www/github/acelerometria/R/basicVariablesJW.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/fjbar/Dropbox/www/github/acelerometria/R/basicVariablesJW.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/fjbar/Dropbox/www/github/acelerometria/R/basicVariables.R', echo=TRUE)
library(acelerometria)
setwd("C:/Users/fjbar/Dropbox/www/github/acelerometria/R")
library(acelerometria)
library(acelerometria)
setwd("C:/Users/fjbar/Dropbox/www/app-icapdata/jb-predimedplus/IMIM/31.jijir/nuevasVariables")
setwd("C:/Users/fjbar/Dropbox/www/app-icapdata/jb-predimedplus/IMIM/31.jijir/nuevasVariables")
save(dfGlobal,file = "variablesAntoniColom.RData")
source('C:/Users/fjbar/Dropbox/www/app-icapdata/jb-predimedplus/IMIM/31.jijir/nuevasVariables/paraAntoniColom.R', echo=TRUE)
load("variablesAntoniColom.RData")
library(lubridate)
library(tidyverse)
library(caTools)
library(openxlsx)
library(parallel)
library(lubridate)
library(purrr)
load("variablesAntoniColom.RData")
dfGlobal
inicio=min(dfGlobal$desde)
inicio
fin=max(dfGlobal$hasta)
inicio
fin
inicio=as.Date(min(dfGlobal$desde))
fin=as.Date(max(dfGlobal$hasta))
inicio
fin
fin-inicio
for (dia in inicio:fin){
cat(dia,"\ ")
}
numDias=difftime(fin,inicio)
numDias
numDias=difftime(fin,inicio,units = "days")
numDias
numDias=as.integer(difftime(fin,inicio,units = "days"))
numDias
library(jsonlite)
Sys.sleep(5)
Sys.sleep(5)
inicio
fecha=as.character(inicio)
horaFin="23:59:59UTC
estacion="6155A"
estacion="6155A"
horaFin="23:59:59UTC"
URL1=sprintf("https://opendata.aemet.es/opendata/api/valores/climatologicos/diarios/datos/fechaini/%sT%s/fechafin/%sT%s/estacion/%s/?api_key=%s",
fecha,horaInicio,fecha,horaFin,estacion,api_key)
horaInicio="00:00:00UTC"
URL1=sprintf("https://opendata.aemet.es/opendata/api/valores/climatologicos/diarios/datos/fechaini/%sT%s/fechafin/%sT%s/estacion/%s/?api_key=%s",
fecha,horaInicio,fecha,horaFin,estacion,api_key)
api_key="eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJiYXJvbkB1bWEuZXMiLCJqdGkiOiJkMDY4NmY3NC04ZDFhLTQyNWQtOTdhNi01OTgwOTQ1NzNlZWQiLCJpc3MiOiJBRU1FVCIsImlhdCI6MTUzNDE3MDQ3NSwidXNlcklkIjoiZDA2ODZmNzQtOGQxYS00MjVkLTk3YTYtNTk4MDk0NTczZWVkIiwicm9sZSI6IiJ9.PygKv7FFGBMSI9VW9hN-gmXHz5apXrV-MopDP1WirOg"
URL1=sprintf("https://opendata.aemet.es/opendata/api/valores/climatologicos/diarios/datos/fechaini/%sT%s/fechafin/%sT%s/estacion/%s/?api_key=%s",
fecha,horaInicio,fecha,horaFin,estacion,api_key)
URL1
library(curl)
library(rcurl)
library(RCurl)
library(jsonlite)
library(RCurl)
fase1<- fromJSON(URL1)
fase1
fase1$estado=="200"
fase1$estado==200
fase2<-fromJSON(fase1$datos)
options(encoding="UTF-8")
fase2<-fromJSON(fase1$datos,)
req <- curl_fetch_memory(fase1$datos)
req
rawToChar(req$content))
rawToChar(req$content)
URL1=sprintf("https://opendata.aemet.es/opendata/api/valores/climatologicos/diarios/datos/fechaini/%sT%s/fechafin/%sT%s/estacion/%s/?api_key=%s",
fecha,horaInicio,fecha,horaFin,estacion,api_key)
fase1<- fromJSON(URL1)
req <- curl_fetch_memory(fase1$datos)
rawToChar(req$content)
str(req)
rawToChar(req$content)
jsonlite::fromJSON(rawToChar(req$content))
fromJSON(rawToChar(req$content))
class(fromJSON(rawToChar(req$content)))
fromJSON(rawToChar(req$content)) %>% as_tibble()
leeAEMET=function(fecha,horaInicio="00:00:00UTC",horaFin="23:59:59UTC",estacion="6155A",api_key="",sleep=5){
URL1=sprintf("https://opendata.aemet.es/opendata/api/valores/climatologicos/diarios/datos/fechaini/%sT%s/fechafin/%sT%s/estacion/%s/?api_key=%s",
fecha,horaInicio,fecha,horaFin,estacion,api_key)
fase1<- fromJSON(URL1)
if(fase1$estado!=200) return (NULL)
req <- curl_fetch_memory(fase1$datos)
fromJSON(rawToChar(req$content)) %>% as_tibble()
}
esteDia=inicio+i
i=0
esteDia=inicio+i
esteDia
leeAEMET=function(fecha,horaInicio="00:00:00UTC",horaFin="23:59:59UTC",estacion="6155A",api_key="",sleep=5){
URL1=sprintf("https://opendata.aemet.es/opendata/api/valores/climatologicos/diarios/datos/fechaini/%sT%s/fechafin/%sT%s/estacion/%s/?api_key=%s",
fecha,horaInicio,fecha,horaFin,estacion,api_key)
Sys.sleep(sleep)
fase1<- fromJSON(URL1)
if(fase1$estado!=200) return (NULL)
req <- curl_fetch_memory(fase1$datos)
fromJSON(rawToChar(req$content)) %>% as_tibble()
}
total=NULL
i=0
for (i in (0:(10+0*numDias)){
source('C:/Users/fjbar/Dropbox/www/app-icapdata/jb-predimedplus/IMIM/31.jijir/nuevasVariables/paraAntoniColom_parte2.R', echo=TRUE)
source('C:/Users/fjbar/Dropbox/www/app-icapdata/jb-predimedplus/IMIM/31.jijir/nuevasVariables/paraAntoniColom_parte2.R', echo=TRUE)
source('C:/Users/fjbar/Dropbox/www/app-icapdata/jb-predimedplus/IMIM/31.jijir/nuevasVariables/paraAntoniColom_parte2.R', echo=TRUE)
source('C:/Users/fjbar/Dropbox/www/app-icapdata/jb-predimedplus/IMIM/31.jijir/nuevasVariables/paraAntoniColom_parte2.R', echo=TRUE)
source('C:/Users/fjbar/Dropbox/www/app-icapdata/jb-predimedplus/IMIM/31.jijir/nuevasVariables/paraAntoniColom_parte2.R', echo=TRUE)
total
v1=(2,1)
v1=c(2,1)
v2=c(-2,-1)
M=cbind(v1,v2)
M
df=data.frame(t(M))
df
p0 <- ggplot(df, aes(x=0,y=0,xend = X1, yend = X2)) +
coord_cartesian(xlim = c(-10,10),ylim = c(-10,10)) +
geom_segment()
library(shiny)
library(tidyverse)
library(ggplot2)
p0 <- ggplot(df, aes(x=0,y=0,xend = X1, yend = X2)) +
coord_cartesian(xlim = c(-10,10),ylim = c(-10,10)) +
geom_segment()
p0
p0 <- ggplot(df, aes(x=0,y=0,xend = X1, yend = X2)) +
coord_cartesian(xlim = c(-10,10),ylim = c(-10,10)) +
geom_segment(arrow=arrow())
p0
M=cbind(v1,v2)
tM=t(M);names(tM)=c("xend","yend")
df=data.frame(x=c(0,0),y=c(0,0),tM)
df
tM=t(M);names(tM)=c("xend","yend")
tM
tM=data.frame(t(M));names(tM)=c("xend","yend")
tM
df=data.frame(x=c(0,0),y=c(0,0),tM)
df
p0 <- ggplot(df, aes(x=x,y=y,xend = X1, yend = X2)) +
coord_cartesian(xlim = c(-10,10),ylim = c(-10,10)) +
geom_segment(arrow=arrow())
p0
p0 <- ggplot(df, aes(x=x,y=y,xend = xend, yend = yend)) +
coord_cartesian(xlim = c(-10,10),ylim = c(-10,10)) +
geom_segment(arrow=arrow())
p0
p0 <- ggplot(df, aes(x=x,y=y,xend = xend, yend = yend)) +
coord_cartesian(xlim = c(-10,10),ylim = c(-10,10)) +
geom_segment(arrow=arrow())+
geom_point( size=4, shape=21, fill="white")+
theme_set(theme_minimal(base_size = 18))
p0
p0 <- ggplot(df, aes(x=x,y=y,xend = xend, yend = yend)) +
coord_cartesian(xlim = c(-10,10),ylim = c(-10,10)) +
geom_segment(arrow=arrow())+
geom_point( size=4, shape=21, fill="white")+
theme_minimal()
p0
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
df
M
dfPoly=tribble(~x, ~y, 0,0,v1,v2,v1+v2)
dfPoly=tribble(~x, ~y, 0,0,v1[1],v1[2],v2[1],v2[2],v1[1]+v2[1],v1[2]+v2[2])
dfPoly
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
M=cbind(v1,v2)
tM=data.frame(t(M));names(tM)=c("xend","yend")
tM
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
determinant(M)
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
espaciado=seq(-10,10,by=1)
espaciado
malla=expand.grid(x=espaciado,y=espaciado)
malla
p0 <- ggplot(df, aes(x=x,y=y)) +
coord_cartesian(xlim = c(-6,6),ylim = c(-6,6)) +
geom_segment(aes(xend = xend, yend = yend),arrow=arrow( type = "closed"))+
geom_point( size=4, shape=21, fill="white")+
scale_x_continuous(breaks=-10:10,minor_breaks=NULL)+
scale_y_continuous(breaks=-10:10,minor_breaks=NULL)+
geom_polygon(data=dfPoly,aes(x=x,y=y),fill=color)+
geom_point(data = malla,aes(x=x,y=y))+
theme_minimal()
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
M_malla=M%*%malla
M
class(M)
class(malla)
M_malla=M%*%as.matrix(malla)
as.matrix(malla)
M
M_malla=M * as.matrix(malla)
M
as.matrix(malla)
M_malla=M *%* as.matrix(malla)
M_malla=M %*% as.matrix(malla)
malla=as.matrix(expand.grid(x=espaciado,y=espaciado))
M_malla=M %*% malla
M_malla
malla=as.matrix(expand.grid(x=espaciado,y=espaciado))
M_malla=M %*% malla
class(M)
class(Malla)
class(malla)
dim(M)
dim(malla)
M_malla=M %*% t(malla)
M_malla
M_malla=malla %*% M
M_malla
dim(M_malla)
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
M_malla=data.frame(malla %*% M)
M_malla
names(M_malla)
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
M_malla=data.frame(t(malla %*% t(M)))
M_malla
M_malla=data.frame(malla %*% t(M))
M_malla
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
M_malla
espaciado
?expand.grid
malla_h=data.frame(y=espaciado,yend=espaciado,x=-lMalla,yend=lMalla)
lMalla=10
malla_h=data.frame(y=espaciado,yend=espaciado,x=-lMalla,yend=lMalla)
malla_h
malla_h=data.frame(x=lMalla,y=espaciado)
malla_h
malla_h1=data.frame(x=-lMalla,y=espaciado)
malla_h2=data.frame(x=lMalla,y=espaciado)
malla_h1=data.frame(x=-lMalla,y=espaciado)
malla_h2=data.frame(x=lMalla,y=espaciado)
malla_h=data.frame(malla_h1 %*% t(M))
malla_h1=data.frame(x=-lMalla,y=espaciado)
malla_h2=data.frame(x=lMalla,y=espaciado)
malla_h2=as.matrix(data.frame(x=lMalla,y=espaciado))
malla_h1=as.matrix(data.frame(x=-lMalla,y=espaciado))
malla_h2=as.matrix(data.frame(x=lMalla,y=espaciado))
malla_h=data.frame(malla_h1 %*% t(M))
names(malla_h=c("x","y")
determinante=v1[1]*v2[2]-v1[2]*v2[1]
color=ifelse(sign(determinante)==1,"#FF000055","#0000FF55")
p0 <- ggplot(df, aes(x=x,y=y)) +
coord_cartesian(xlim = c(-6,6),ylim = c(-6,6)) +
geom_segment(aes(xend = xend, yend = yend),arrow=arrow( type = "closed"))+
geom_point( size=4, shape=21, fill="white")+
scale_x_continuous(breaks=-10:10,minor_breaks=NULL)+
scale_y_continuous(breaks=-10:10,minor_breaks=NULL)+
geom_polygon(data=dfPoly,aes(x=x,y=y),fill=color)+
geom_point(data = M_malla,aes(x=x,y=y))+
theme_minimal()
p0
}, width = 500, height = 500)
names(malla_h)=c("x","y")
malla_h
v1=c(2,0)
v2=c(0,3)
M=cbind(v1,v2)
tM=data.frame(t(M));names(tM)=c("xend","yend")
df=data.frame(x=c(0,0),y=c(0,0),tM)
dfPoly=tribble(~x, ~y, 0,0,v1[1],v1[2],v1[1]+v2[1],v1[2]+v2[2],v2[1],v2[2])
lMalla=10
espaciado=seq(-lMalla,lMalla,by=1)
malla=as.matrix(expand.grid(x=espaciado,y=espaciado))
M_malla=data.frame(malla %*% t(M))
names(M_malla)=c("x","y")
malla_h1=as.matrix(data.frame(x=-lMalla,y=espaciado))
malla_h2=as.matrix(data.frame(x=lMalla,y=espaciado))
malla_h=data.frame(malla_h1 %*% t(M))
names(malla_h)=c("x","y")
malla_h
malla_h=data.frame(malla_h1 %*% t(M)) %>% cbind (data.frame(malla_h2 %*% t(M)))
names(malla_h)=c("x","y","xend","yend")
malla_h
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
malla_h=data.frame(malla_h1 %*% t(M)) %>% cbind (data.frame(malla_h2 %*% t(M)))
names(malla_h)=c("x","y","xend","yend")
malla_h
class(malla_h)
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
runApp('C:/Users/fjbar/Dropbox/www/shiny/correlacion')
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
entrada=c(2,1)
datosEntrada=as.matrix(data.frame(x=0,y=0,xend=vectorEntrada()[1],yend=vectorEntrada()[2]))
datosEntrada=as.matrix(data.frame(x=0,y=0,xend=entrada[1],yend=entrada[2]))
datosEntrada
salida=data.frame(entrada %*% t(M))
salida
entrada
salida=data.frame(datosEntrada %*% t(M))
M
salida=data.frame(entrada %*% t(M))
salida
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
datosEntrada=as.matrix(data.frame(x=0,y=0,xend=entrada[1],yend=entrada[2]))
salida=data.frame(entrada %*% t(M)) %>% as.numeric()
dfVector= tribble(~x,~y,~xend,~yend,~linea,
0,0,entrada[1],entrada[2],"entrada",
0,0,salida[1],salida[2],"salida")
dfVector
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
dfVector
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
?renderPlotly
runApp('C:/Users/fjbar/Dropbox/www/shiny/lineal/matriz')
library(dygraphs)
v1
v2
df
source('C:/Users/fjbar/Dropbox/www/github/acelerometria/R/criterioNoMVPA.R', echo=TRUE)
library(acelerometria)
