dfAgregado=dfGlobal %>% group_by(Nodo,fileName,calendario,variable) %>%
summarise(media=mean(duration/60),maximo=max(duration/60),minimo=min(duration/60)) %>%
gather()
dfAgregado
dfAgregado=dfGlobal %>% group_by(Nodo,fileName,calendario,variable) %>%
summarise(media=mean(duration/60),maximo=max(duration/60),minimo=min(duration/60)) %>%
gather(media,maximo,minimo)
dfAgregado
dfAgregado=dfGlobal %>% group_by(Nodo,fileName,calendario,variable) %>%
summarise(media=mean(duration/60),maximo=max(duration/60),minimo=min(duration/60)) %>%
gather(key=estadistico,value=valor,media,maximo,minimo)
dfAgregado
dfAgregado=dfGlobal %>% group_by(Nodo,fileName,calendario,variable) %>%
summarise(media=mean(duration/60),maximo=max(duration/60),minimo=min(duration/60)) %>%
gather(key=estadistico,value=valor,media,maximo,minimo)%>%
unite(variable,variable,calendario,estadistico,sep="_")
dfAgregado
dfAgregado=dfGlobal %>% group_by(Nodo,fileName,calendario,variable) %>%
summarise(media=mean(duration/60),maximo=max(duration/60),minimo=min(duration/60)) %>%
gather(key=estadistico,value=valor,media,maximo,minimo)%>%
unite(variable,variable,calendario,estadistico,sep="_") %>%
spread(variable,valor)
dfAgregado
dfWide=dfAgregado%>%
gather(key=estadistico,value=valor,media,maximo,minimo)%>%
unite(variable,variable,calendario,estadistico,sep="_") %>%
spread(variable,valor)
dfAgregado=dfGlobal %>% group_by(Nodo,fileName,calendario,variable) %>%
summarise(media=mean(duration/60),maximo=max(duration/60),minimo=min(duration/60))
dfWide=dfAgregado%>%
gather(key=estadistico,value=valor,media,maximo,minimo)%>%
unite(variable,variable,calendario,estadistico,sep="_") %>%
spread(variable,valor)
##Formato wide
dfWide=dfAgregado%>%
gather(key=estadistico,value=valor,media,maximo,minimo)%>%
unite(variable,variable,calendario,estadistico,sep="_") %>%
spread(variable,valor)
dfWide
dfApp
### Emparejado
dfEmparejado=dfApp%>% left_join(dfWide)
dfEmparejado
dfApp
### Emparejado
dfEmparejado=dfApp%>% left_join(dfWide)
dfEmparejado
### Emparejado
dfEmparejado=dfApp%>% inner_join(dfWide)
dfEmparejado
### Emparejado
dfEmparejado=dfApp%>% inner_join(dfWide)
write.xlsx(dfEmparejado,"emparejados.xlsx")
names(dfEmparejado)
todo_resumen
names(todo_resumen)
dfWide
dfWide$cama_bed_maximo
dfWide$cama_bed_maximo[1]
##Formato wide
dfWide=dfAgregado%>%
gather(key=estadistico,value=valor,media,maximo,minimo)%>%
unite(variable,variable,calendario,estadistico,sep="_") %>%
spread(variable,valor) %>%
mutate(valor=round(valor,1))
### Emparejado
dfEmparejado=dfApp%>% inner_join(dfWide)
write.xlsx(dfEmparejado,"emparejados.xlsx")
### Emparejado
dfEmparejado=dfApp%>% inner_join(dfWide)
write.xlsx(dfEmparejado,"emparejados.xlsx")
##Formato wide
dfWide=dfAgregado%>%
gather(key=estadistico,value=valor,media,maximo,minimo)%>%
unite(variable,variable,calendario,estadistico,sep="_") %>%
spread(variable,valor) %>%
mutate(valor=round(valor,1))
##Formato wide
dfWide=dfAgregado%>%
gather(key=estadistico,value=valor,media,maximo,minimo)%>%
mutate(valor=round(valor,1)) %>%
unite(variable,variable,calendario,estadistico,sep="_") %>%
spread(variable,valor)
dfWide$cama_bed_maximo[1]
dfWide$cama_bed_maximo
### Emparejado
dfEmparejado=dfApp%>% inner_join(dfWide)
write.xlsx(dfEmparejado,"emparejados.xlsx")
#############SOLO PARA hacer tests
dfApp=dfApp %>% filter (fileName=="__015664_2014-10-29_23-14-22.bin" & Nodo=="benalmadena")
library(lubridate)
library(tidyverse)
library(caTools)
library(openxlsx)
library(parallel)
library(lubridate)
library(purrr)
dirLib="../../../../../github/acelerometria/R/"
srcFiles=list.files(dirLib,pattern = "[^W].R$")
for(fic in paste0(dirLib,srcFiles)) source(fic)
#####################################
##
listaCalendarioXIntervalos=list(
"diario"=c("nonWear", "VPA_B1", "MVPA_B1", "MVPA_B10",
"LPA_B1", "INA_B1", "INA_B30", "SIB"),
"awake"=c("VPA_B1", "MVPA_B1", "MVPA_B10",
"LPA_B1", "INA_B1", "INA_B30",
"SIB"),
"bed"=c("cama", "dormir","SIB")
)
##############################
###Control de fecha Inicio y final
#Cargar todo_resumen
load("../../../../../../../Btsync/tablasDeInteres/v2_resumenPacientesGGIR.Rdata")
dfApp <- todo_resumen %>% select(Nodo,Codigo,fileName, autofecha_outgenea, autofecha_ingenea) %>%
mutate(autofecha_outgenea = ymd_hms(autofecha_outgenea,tz = "Europe/Madrid"),
autofecha_ingenea = ymd_hms(autofecha_ingenea,tz = "Europe/Madrid"),
fileName=str_replace(fileName,"bin .*","bin")) %>%
as_tibble() %>% filter(!is.na(fileName),
!is.na(autofecha_outgenea),
!is.na(autofecha_ingenea))
dfGlobal=NULL
#############SOLO PARA hacer tests
dfApp=dfApp %>% filter (fileName=="__015664_2014-10-29_23-14-22.bin" & Nodo=="benalmadena")
i=1
Nodo=dfApp$Nodo[i]
BIN=dfApp$fileName[i]
cat(i,"/",nrow(dfApp),Nodo,BIN,"\n")
dirMeta=str_c("../../../../../../../Btsync/generaInformes/ggir/",Nodo,"/output_2.archivos_bin_procesados/meta/")
ficFase1=str_c(dirMeta,"basic/meta_",BIN,".RData")
load(ficFase1)
df=M$metashort %>%
mutate(
timestamp = ymd_hms(timestamp,tz = "Europe/Madrid")
) %>%  select (timestamp,ENMO,anglez) %>% as_tibble()
##NonWear
dfNW=M$metalong  %>%
mutate(
timestamp = ymd_hms(timestamp,tz = "Europe/Madrid"),
.criterioRaw=as.integer(nonwearscore!=0),
.criterioBout=.criterioRaw) %>%
select(timestamp,.criterioRaw,.criterioBout) %>% as_tibble()
intervalosNW=dfNW %>% criterio2Interval() %>% #Eliminando nonWear cortos de noche
filter(! (  (difftime(to,from)<dminutes(120) & hour(to)<=8) | difftime(to,from)<dminutes(40)))
df=df %>% mutate(.criterioNW= interval2criterio(df$timestamp,intervalosNW))
dfEsteBin=todo_resumen%>% as_tibble() %>% filter(fileName==BIN & Nodo==Nodo) %>%
select(Codigo,apellidos,nombre,fileName,Nodo,autofecha_outgenea,autofecha_ingenea,serial_outgenea)
if(nrow(dfEsteBin)==1){
desde=ymd_hms(dfEsteBin$autofecha_outgenea)
hasta=ymd_hms(dfEsteBin$autofecha_ingenea)
if(!is.na(desde) & !is.na(hasta)) df=df %>% filter(timestamp >= desde & timestamp <=hasta)
} else cat("\n<p>No hay datos en App para este BIN</p>")
calculos=mclapply(basicVariables,function(x)x(df),mc.cores=1)
cama=intervalBED(calculos$SIB$intervals, calculos$MuyQuieto$intervals,distance1=dminutes(40),distance2=dminutes(5))
cama
listaIntervalos=
list(
cama=cama %>% transmute(from=startBed,to=endBed),
dormir=cama %>% transmute(from=startSleep,to=endSleep)
) %>% append (calculos %>% map("intervals"))
listaIntervalos
listaIntervalos
horario
horario=intervals4Summary_daily(df)
horario
horario[1,1]
horario[[1]][1]
horario[[1]][8]
start=head(df$timestamp,1)
end=tail(df$timestamp,1)
timezone=tz(start)
start
from=(start-dhours(hour(start))-dminutes(minute(start))-dseconds(second(start)))+starts+ddays(0:as.integer(as_date(end)-as_date(start)))
start=head(df$timestamp,1)
end=tail(df$timestamp,1)
timezone=tz(start)
from=(start-dhours(hour(start))-dminutes(minute(start))-dseconds(second(start)))+starts+ddays(0:as.integer(as_date(end)-as_date(start)))
from
from=(start-dhours(hour(start))-dminutes(minute(start))-dseconds(second(start)))+starts+ddays(0:as.integer(as_date(end)-as_date(start)))
starts=dhours(0)
duration=dhours(23)+dminutes(59)+dseconds(59)
offsetLabels=dhours(0)
last=TRUE
first=TRUE
from=(start-dhours(hour(start))-dminutes(minute(start))-dseconds(second(start)))+starts+ddays(0:as.integer(as_date(end)-as_date(start)))
from
day(from)
day(from[1])
primerDia=as_date(from[1])
primerDia
primerDia=as_date(from[1])
primerDia
timezone(from)
tz(from)
primerDia=as_date(from[1])
primerDia
primerDia=start-dhours(hour(start))-dminutes(minute(start))-dseconds(second(start)))+starts
primerDia=start-dhours(hour(start))-dminutes(minute(start))-dseconds(second(start))+starts
primerDia
primerDia=as_date(start)+starts
primerDia
primerDia=ymd(as_character(as_date(start)))+starts
primerDia=ymd(as.character(as_date(start)))+starts
primerDia
starts
primerDia=ymd(as.character(as_date(start)),tz=timezone(starts))+starts
primerDia=ymd(as.character(as_date(start)),tz=tz(starts))+starts
primerDia
head(df$timestamp,1)
timezone(starts)
primerDia=ymd(as.character(as_date(start)),tz=tz(start))+starts
primerDia
segundoDia=ymd(as.character(as_date(start)+1),tz=tz(start))+starts
segundoDia
segundoDia=ymd(as.character(as_date(start)+4),tz=tz(start))+starts
segundoDia
numDias=as.integer(as_date(end)-as_date(start)
from=(start-dhours(hour(start))-dminutes(minute(start))-dseconds(second(start)))+starts+ddays(0:as.integer(as_date(end)-as_date(start)))
primerDia=ymd(as.character(as_date(start)),tz=tz(start))+starts
segundoDia=ymd(as.character(as_date(start)+4),tz=tz(start))+starts
day(from[1])
if(!first) from=from[-1]
if(!last) from=from[- length(from)]
data.frame(from=from) %>% mutate(
to=from+duration,
day=as_date(from+offsetLabels),
label=label) %>%
as_tibble()
}
intervals4Summary_strict=function(df,label="start_end"){
data.frame(
from=head(df$timestamp,1),
to=tail(df$timestamp,1)) %>% mutate(
day=as_date(from),
label=label) %>% as_tibble()
}
intervals4Summary_dailystrict=function(df,label="24h",first=TRUE,last=TRUE,offsetLabels=dhours(0),starts=dhours(0),duration=dhours(23)+dminutes(59)+dseconds(59)){
intervals4Summary_daily(df,label=label,first=first,last=last,offsetLabels=offsetLabels,starts=starts,duration=duration) %>%
intervalIntersect(intervals4Summary_strict(df)) %>%
transmute(day=day,from=fromNew,to=toNew)
}
intervals4Summary_awake=function(df,cama,label="awake",first=FALSE){
start=head(df$timestamp,1)
end=tail(df$timestamp,1)
timezone=tz(start)
cama  %>%
transmute(from=endSleep+dseconds(1),to=lead(startSleep,1)+dseconds(-1),day=day,label=label) %>%
filter(row_number()>1 & row_number()<nrow(.) | row_number()==1 & first) %>%
filter(!is.na(to))
}
intervals4Summary_inBed=function(df,cama,label="bed",first=FALSE){
start=head(df$timestamp,1)
end=tail(df$timestamp,1)
timezone=tz(start)
cama  %>%
transmute(from=startBed,to=endBed,day=day,label=label) %>%
filter(row_number()>1  | row_number()==1 & first )
}
####No se usarán de aquí para abajo
BORRARintervals4Summary_WDvsWE=function(df,first=TRUE,last=TRUE,offsetLabels=dhours(0),starts=dhours(0),duration=dhours(23)+dminutes(59)+dseconds(59)){
intervals4Summary_daily(df,first=first,last=last,offsetLabels=offsetLabels,starts=starts,duration=duration) %>%
mutate(group=wday(label)==1 | wday(label)==7,
group=c("WD","WE")[1+as.integer(group)])
}
numDias=as.integer(as_date(end)-as_date(start))
numDias
from=(start-dhours(hour(start))-dminutes(minute(start))-dseconds(second(start)))+starts+ddays(0:as.integer(as_date(end)-as_date(start)))
from
segundoDia=ymd(as.character(as_date(start)+0:8),tz=tz(start))+starts
segundoDia
as.character(segundoDia)
starts=dhours(1)
segundoDia=ymd(as.character(as_date(start)+0:8),tz=tz(start))+starts
segundoDia
# problematic with summer time
#from=(start-dhours(hour(start))-dminutes(minute(start))-dseconds(second(start)))+starts+ddays(0:as.integer(as_date(end)-as_date(start)))
#
from=ymd(as.character(as_date(start)+0:8),tz=tz(start))+starts
from=(start-dhours(hour(start))-dminutes(minute(start))-dseconds(second(start)))+starts+ddays(0:as.integer(as_date(end)-as_date(start)))
from
data.frame(from=from) %>% mutate(
to=from+duration,
day=as_date(from+offsetLabels),
label=label) %>%
as_tibble()
#
#from=ymd(as.character(as_date(start)+0:8),tz=tz(start))+starts
#to=ymd(as.character(as_date(start)+0:8),tz=tz(start))+starts
#day(from[1])
if(!first) from=from[-1]
if(!last) from=from[- length(from)]
data.frame(from=from) %>% mutate(
to=from+duration,
day=as_date(from+offsetLabels),
label=label) %>%
as_tibble()
label="pepe"
data.frame(from=from) %>% mutate(
to=from+duration,
day=as_date(from+offsetLabels),
label=label) %>%
as_tibble()
data.frame(from=from) %>% mutate(
to=from+duration,
day=as_date(from+offsetLabels),
label=label) %>%
as_tibble() ->qq
(qq$from+qq$pepe)/2
(qq$from+qq$to)/2
round(qq$from)
qq$from
data.frame(from=from) %>% mutate(
to=from+duration,
day=as_date(from[1]+offsetLabels)+0:numDias,
label=label) %>%
as_tibble()
library(lubridate)
library(tidyverse)
library(caTools)
library(openxlsx)
library(parallel)
library(lubridate)
library(purrr)
library(openxlsx)
#Tipos de horarios
listaHorarios=list(
diario=df %>% intervals4Summary_dailystrict(label = "24h",first=FALSE,last=FALSE,offsetLabels=dhours(0),starts=dhours(0),duration=dhours(24)),
awake=df %>% intervals4Summary_awake(cama,label = "awake",first=TRUE),
bed=df %>% intervals4Summary_inBed(cama = cama,label = "bed",first=TRUE)
)
listaHorarios
library(lubridate)
library(tidyverse)
library(caTools)
library(openxlsx)
library(parallel)
library(lubridate)
library(purrr)
library(openxlsx)
dirLib="../../../../../github/acelerometria/R/"
srcFiles=list.files(dirLib,pattern = "[^W].R$")
for(fic in paste0(dirLib,srcFiles)) source(fic)
load("../../../../../../../Btsync/tablasDeInteres/v2_resumenPacientesGGIR.Rdata")
dfApp <- todo_resumen %>% select(Nodo,Codigo,fileName, autofecha_outgenea, autofecha_ingenea) %>%
mutate(autofecha_outgenea = ymd_hms(autofecha_outgenea,tz = "Europe/Madrid"),
autofecha_ingenea = ymd_hms(autofecha_ingenea,tz = "Europe/Madrid"),
fileName=str_replace(fileName,"bin .*","bin")) %>%
as_tibble() %>% filter(!is.na(fileName),
!is.na(autofecha_outgenea),
!is.na(autofecha_ingenea))
#dfGlobal
load (file ="variablesV2.RData" )
dfAgregado=dfGlobal %>% group_by(Nodo,fileName,calendario,variable) %>%
summarise(media=mean(duration/60),maximo=max(duration/60),minimo=min(duration/60))
##Formato wide
dfWide=dfAgregado%>%
gather(key=estadistico,value=valor,media,maximo,minimo)%>%
mutate(valor=round(valor,1)) %>%
unite(variable,variable,calendario,estadistico,sep="_") %>%
spread(variable,valor)
### Emparejado
dfEmparejado=dfApp%>% inner_join(dfWide)
dfEmparejado
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal$variable="nonWear"
#dfGlobal
load (file ="variablesV2.RData" )
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(variable=="nonWear")
dfNW
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear")
dfNW
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear" & (duration > 2*3600| durationRef<20*3600))
dfNW
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear")
dfNW
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear" & (duration > 2*3600| durationRef<20*3600))
write.xlsx(dfNW,"diasNoValidos.xlsx")
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear" & (duration > 2*3600| durationRef<20*3600)) %>%
select(Nodo,fileName,day)
dfNW
write.xlsx(dfNW,"diasNoValidos.xlsx")
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear" & (duration > 2*3600| durationRef<20*3600)) %>%
select(Nodo,fileName,day)
write.xlsx(dfNW,"diasNoValidos.xlsx")
dfNW
dfFiltrado=dfGlobal %>% mutate(valido=TRUE)
dfFiltrado=dfGlobal %>% mutate(valido=TRUE) %>%
left_join(dfNW)
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear" & (duration > 2*3600| durationRef<20*3600)) %>%
mutate(valido=FALSE)
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear" & (duration > 2*3600| durationRef<20*3600)) %>%
mutate(valido=FALSE) %>%
select(Nodo,fileName,day,valido)
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear" & (duration > 2*3600| durationRef<20*3600)) %>%
mutate(valido=FALSE) %>%
select(Nodo,fileName,day,valido)
dfFiltrado=dfGlobal  %>%
left_join(dfNW)
dfFiltrado
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear" & (duration > 2*3600| durationRef<20*3600)) %>%
mutate(validoNW=FALSE) %>%
select(Nodo,fileName,day,valido)
dfFiltrado=dfGlobal  %>%
left_join(dfNW)
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear" & (duration > 2*3600| durationRef<20*3600)) %>%
mutate(validoNW=FALSE) %>%
select(Nodo,fileName,day,valido)
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear" & (duration > 2*3600| durationRef<20*3600)) %>%
mutate(validoNW=FALSE) %>%
select(Nodo,fileName,day,validoNW)
dfFiltrado=dfGlobal  %>%
left_join(dfNW)
dfFiltrado
dfFiltrado=dfGlobal  %>%
left_join(dfNW) %>% filter(is.na(validoNW))
dfFiltrado
dfGlobal
dfFiltrado
dfFiltrado=dfGlobal  %>%
left_join(dfNW) %>% filter(is.na(validoNW)) %>%
select(-validoNW)
dfFiltrado
dfFiltrado=dfGlobal  %>%
left_join(dfNW) %>% filter(is.na(validoNW)) %>%
select(-starts_with("valido"))
dfFiltrado
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear" & (duration > 2*3600| durationRef<20*3600)) %>%
mutate(.validoNW=FALSE) %>%
select(Nodo,fileName,day,validoNW)
dfNW
###Filtrar cuando tengamos criterios de filtrado
dfNW=dfGlobal %>% filter(calendario=="diario" & variable=="nonWear" & (duration > 2*3600| durationRef<20*3600)) %>%
mutate(.validoNW=FALSE) %>%
select(Nodo,fileName,day,.validoNW)
dfFiltrado=dfGlobal  %>%
left_join(dfNW) %>% filter(is.na(.validoNW)) %>%
select(-starts_with("valido"))
dfFiltrado
dfFiltrado=dfGlobal  %>%
left_join(dfNW) %>% filter(is.na(.validoNW)) %>%
select(-starts_with(".valido"))
dfFiltrado
write.xlsx(dfNW,"diasNoValidos-NW.xlsx")
dfMVPA=dfGlobal %>% filter(calendario=="diario" & variable=="MVPA_B1" & (duration > 3*3600)) %>%
mutate(.validoMVPA=FALSE) %>%
select(Nodo,fileName,day,.validoMVPA)
dfMVPA
dfMVPA=dfGlobal %>% filter(calendario=="diario" & variable=="MVPA_B10" & (duration > 3*3600)) %>%
mutate(.validoMVPA=FALSE) %>%
select(Nodo,fileName,day,.validoMVPA)
dfMVPA
dfFiltrado=dfGlobal  %>%
left_join(dfNW) %>% filter(is.na(.validoNW)) %>%
select(-starts_with(".valido"))
dfFiltrado
dfMVPA
dfMVPA=dfGlobal %>% filter(calendario=="diario" & variable=="MVPA_B10" & (duration > 1000*60)) %>%
mutate(.validoMVPA=FALSE) %>%
select(Nodo,fileName,day,.validoMVPA)
dfMVPA
write.xlsx(dfMVPA,"diasNoValidos-MVPA.xlsx")
dfMVPA %>% group_by(fileName) %>% summarise(n=n())
dfFiltrado = dfFiltrado %>% left_join(dfMVPA %>% select(Nodo,fileName))
dfMVPA=dfGlobal %>% filter(calendario=="diario" & variable=="MVPA_B10" & (duration > 1000*60)) %>%
mutate(.validoMVPA=FALSE) %>%
select(Nodo,fileName,.validoMVPA)
dfMVPA
select(Nodo,fileName,day,.validoMVPA) %>% group_by(Nodo,fileName,day) %>% summarise(.validoMVPA=FALSE
dfMVPA
dfMVPA=dfGlobal %>% filter(calendario=="diario" & variable=="MVPA_B10" & (duration > 1000*60)) %>%
mutate(.validoMVPA=FALSE) %>%
select(Nodo,fileName,day,.validoMVPA) %>% group_by(Nodo,fileName,day) %>% summarise(.validoMVPA=FALSE)
dfMVPA
dfMVPA=dfGlobal %>% filter(calendario=="diario" & variable=="MVPA_B10" & (duration > 1000*60)) %>%
mutate(.validoMVPA=FALSE) %>%
select(Nodo,fileName,day,.validoMVPA) %>% group_by(Nodo,fileName) %>% summarise(.validoMVPA=FALSE)
dfMVPA
write.xlsx(dfMVPA,"diasNoValidos-MVPA.xlsx")
dfFiltrado = dfFiltrado %>% left_join(dfMVPA)
dfFiltrado
dfFiltrado = dfFiltrado %>% left_join(dfMVPA) filter(is.na(.validoMVPA))
dfFiltrado = dfFiltrado %>% left_join(dfMVPA) %>% filter(is.na(.validoMVPA))
dfFiltrado
dfFiltrado=dfGlobal  %>%
left_join(dfNW) %>% filter(is.na(.validoNW)) %>%
select(-starts_with(".valido"))
dfFiltrado
dfFiltrado=dfGlobal  %>%
left_join(dfNW) %>% filter(is.na(.validoNW)) %>%
left_join(dfMVPA) %>% filter(is.na(.validoMVPA)) %>% select(-starts_with(".valido"))
dfFiltrado
#Agregar por BIN
dfAgregado=dfFiltrado %>% group_by(Nodo,fileName,calendario,variable) %>%
summarise(media=mean(duration/60),maximo=max(duration/60),minimo=min(duration/60))
source('C:/Users/fjbar/Dropbox/www/app-icapdata/jb-predimedplus/IMIM/31.jijir/nuevasVariables/datosAgregadosyEmparejados.R', echo=TRUE)
write.xlsx(dfEmparejado,"emparejados.xlsx")
source('C:/Users/fjbar/Dropbox/www/app-icapdata/jb-predimedplus/IMIM/31.jijir/nuevasVariables/datosAgregadosyEmparejados.R', echo=TRUE)
setwd("C:/Users/fjbar/Dropbox/www/github/acelerometria/R")
